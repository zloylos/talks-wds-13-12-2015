// ------------------------------------------------------------------
// Defaults
// ------------------------------------------------------------------
// 1. Sizes ............ Global layout and color variables
//    - Width .......... Default slide width 1024 px
//    - Height ......... Height calculated based on width and ratio
//    - Gap ............ Gap between slides in List mode
// 2. Colors ........... Global color variables
// 3. Retina ........... Retina detection mixin
// 4. Underliner ....... Mixin for drawing lines using gradient
// 5. Scale ............ MQ generator based on slides scale factor
// 6. Offscreen ........ Mixing for hiding things in accessible way
// 7. Diagonal ......... Two-half gradient rotated by 135 degrees
// 8. Shadows .......... Canonical Material Design shadows
// 9. Sanitizer ........ For data:uri SVG
// ------------------------------------------------------------------

// Sizes

$width:1024px;
$height:$width/$ratio;
$gap:96px;

// Colors

$color: blue;

$black:mix(black, white, 87%);
$dark:mix(black, white, 54%);
$medium:mix(black, white, 38%);
$light:mix(black, white, 26%);
$back:#eee;

// Retina

@mixin retina {
	@media (min-resolution:2dppx) {
		@content;
		}
	}

// Underliner

@mixin underline($color, $width) {
	background:
		linear-gradient(
			to top,
			$color #{$width}em,
			transparent #{$width}em
		) repeat-x;
	}

// Scale

@mixin scale($scale) {
	@if $scale == 4 {
		@content;
		}
	@else {
		@media (min-width:2 * ($width / $scale) + ($gap / $scale) * 3) {
			@content;
			}
		}
	}

// Offscreen

@mixin offscreen {
	position:absolute;
	clip:rect(0 0 0 0);
	overflow:hidden;
	margin:-1px;
	padding:0;
	width:1px;
	height:1px;
	border:none;
	}

// Diagonal

@function diagonal() {
	@return linear-gradient(
		135deg, $color 50%,
		mix(black, $color, 10%) 50%
		)
	}

// Shadows

$shadows:(
	2:(
		0 3px 1px -2px,
		0 3px 1px -2px,
		0 1px 5px 0
		),
	3:(
		0 3px 4px 0,
		0 3px 3px -2px,
		0 1px 8px 0
		),
	4:(
		0 4px 5px 0,
		0 1px 10px 0,
		0 2px 4px -1px
		),
	6:(
		0 6px 10px 0,
		0 1px 18px 0,
		0 3px 5px -1px
		),
	8:(
		0 8px 10px 1px,
		0 3px 14px 2px,
		0 5px 5px -3px
		),
	16:(
		0 16px 24px 2px,
		0 6px 30px 5px,
		0 8px 10px -5px
		)
	);
$shadows-opacity:
	0.2, 0.14, 0.12;

@mixin shadow($dp, $scale) {
	$list:map-get($shadows, $dp);
	@each $item in $list {
		$index:index($list, $item);
		@each $number in $item {
			$item:set-nth(
				$item,
				index($item, $number),
				$number * $scale
				)
			}
		$item:append(
			$item,
			rgba(0, 0, 0, nth($shadows-opacity, $index))
			);
		$list:set-nth(
			$list,
			$index,
			$item
			);
		}
	box-shadow:$list;
	}

// Sanitizer

@function svg($svg) {
	$encoded:'';
	$slice: 2000;
	$index: 0;
	$loops: ceil(str-length($svg)/$slice);
	@for $i from 1 through $loops {
		$chunk: str-slice($svg, $index, $index + $slice - 1);
		$chunk: str-replace($chunk,'"','\'');
		$chunk: str-replace($chunk,'<','%3C');
		$chunk: str-replace($chunk,'>','%3E');
		$chunk: str-replace($chunk,'&','%26');
		$chunk: str-replace($chunk,'#','%23');
		$encoded: #{$encoded}#{$chunk};
		$index: $index + $slice;
	}
	@return url("data:image/svg+xml;charset=utf8,#{$encoded}");
}

@function str-replace($string, $search, $replace: '') {
	$index: str-index($string, $search);
	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace +
			str-replace(str-slice($string, $index +
			str-length($search)), $search, $replace);
	}
	@return $string;
}
